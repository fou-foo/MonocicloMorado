Password <- isolate(input$passwd)
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
USER$Logged <- TRUE
}
}
}
}
}
})
observe({
if (USER$Logged == FALSE) {
output$page <- renderUI({
div(class="outer",do.call(bootstrapPage,c("",ui1())))
})
}
if (USER$Logged == TRUE)
{
output$page <- renderUI({
div(class="outer",do.call(navbarPage,c(inverse=TRUE,title = "Contratulations you got in!",ui2())))
})
print(ui)
}
})
})
runApp(list(ui = ui, server = server))
rm(list = ls())
library(shiny)
Logged = FALSE;
my_username <- "test"
my_password <- "test"
ui1 <- function(){
tagList(
div(id = "login",
wellPanel(textInput("userName", "Username"),
passwordInput("passwd", "Password"),
br(),actionButton("Login", "Log in"))),
tags$style(type="text/css", "#login {font-size:10px;   text-align: left;position:absolute;top: 40%;left: 50%;margin-top: -100px;margin-left: -150px;}")
)}
ui2 <- function(){tagList(tabPanel("Test"))}
ui = (htmlOutput("page"))
server = (function(input, output,session) {
USER <- reactiveValues(Logged = Logged)
observe({
if (USER$Logged == FALSE) {
if (!is.null(input$Login)) {
if (input$Login > 0) {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
USER$Logged <- TRUE
}
}
}
}
}
})
observe({
if (USER$Logged == FALSE) {
output$page <- renderUI({
div(class="outer",do.call(bootstrapPage,c("",ui1())))
})
}
if (USER$Logged == TRUE)
{
output$page <- renderUI({
div(class="outer",do.call(navbarPage,c(inverse=TRUE,title = "Contratulations you got in!",ui2())))
})
print(ui)
}
})
})
runApp(list(ui = ui, server = server))
a <- c ('Download', 'cancel_promo_yearly', 'cancel_promo_monthly', 'OpenApp', 'LogOut', 'logOut', 'S_DAPNewSkills', 'ClickInappCta', 'Survey', 'ClickSurveyAnswer',
'ClickSurveyDismiss', 'S_SPHome', 'S_SPLogin', 'LogIn', 'SPForgotPass', 'S_SPSignup', 'SignUp', 'S_OBUserRole',
'OBCreateUser', 'S_OBBabyName', 'CreateBaby', 'OBCreateTwins', 'S_OBPremature', 'S_OBWeightLength', 'OBNotification', 'S_IAIntro', 'IAStraightToActivities', 'S_Paywall',
'Paywall_Dismiss', 'IAStartAssessment', 'IASkipAssessment', 'MasterSkill', 'IAFinishSkill', 'S_IAHome', 'S_HealthInterest', 'IAFinishAssessment', 'S_IAReminderSet',
'S_IAReminderContinue', 'IAReminder', 'S_DAPHome', 'DAPChangeActivity', 'S_DAPPastPlansPremium', 'DAPActivityCompleted', 'InviteFriends', 'DAPFullScreenActivity',
'S_DAPMaterials', 'ActivityDescription', 'MilestonesUpdate', 'Share', 'Favorite', 'ArticleView', 'SlideshowView', 'PPPaymentFail', 'PPPaymentStarted', 'PPPaymentSuccess',
'PPPaymentProvider', 'NPSSubmit', 'S_NPSScore', 'S_RWDashboard', 'RWRedeemSuccess', 'RWRedeemStarted', 'RWInvite', 'S_SkillsHome', 'S_SkillsWeightLength', 'SkillsMilestoneLearnMore',
'S_SkillsMilestones', 'SkillsReviewIA', 'SkillsDetail', 'UpdateLength', 'UpdateWeight', 'S_MilestonesHome', 'SkillsCardNotPersonalize', 'SkillsCardNotPersonalized',
'SkillsViewAllSkills', 'ManageSubscription', 'S_MySubscription', 'ReasonsToCancel', 'FeaturesToTry', 'S_Reason_Activities', 'S_Reason_Activities', 'S_Reason_Budget', 'S_Reason_Age',
'S_Reason_NoTime', 'S_FeaturesYouLose', 'CancelSubscription', 'S_MenuFamilyHome', 'S_MenuSetReminders', 'MenuHelp', 'MenuMemberStats', 'MenuFamilyInvite', 'MenuChangeBirthday',
'MenuSkipVideo', 'MenuTellMyFriends', 'S_MenuEditBaby', 'S_MenuUserProfile', 'MenuFamilyDefault', 'DailyReminders', 'S_MenuFamilyProfile', 'TAPCallToAction', 'S_PremiumProcess',
'CATSkillDetail', 'S_CATHome_P', 'S_CATHome_F', 'S_CATSkill', 'S_CATFavorite_F', 'S_CATFavorite_P', 'CATSearch', 'S_CATViewSkill', 'ActivityView', 'FirstActivityView',
'ClickInDAP', 'S_PromoCode', 'PromoCodeRedeem', 'DeleteAccount', 'S_ProgressHome', 'S_ProgressSkillHome', 'S_InviteReceived', 'InviteReceived', 'S_DSVidas', 'RateActivityDAP',
'Feedback_RateActivity', 'Dismiss_Feedback_RateActivity', 'S_MilestonesHome', 'S_SkillsMilestones', 'S_Skills_Milestones', 'SkillsCardNotPersonalize', 'SkillsCardNotPersonalized',
'SkillsMilestoneLearnMore', 'GetStarted', 'S_RW_Paywall', 'ExpiredSubscription', 'Refund', 'TurnOff_Sub', 'AB_TEST', 'S_RWDashboard', 'S_RW_Redeem', 'S_Paywall_Soft',
'Paywall_Dismiss', 'OverTime', 'ComparedAge', 'RestorePurchase')
idioma <- 'en'
paste0('IA_', idioma,'.csv')
for (i in 1:49)
require(data.table)
x <- data.table(frequency = c(10,9,8,7,6,5,4,3,2,1), names = c("ten", "nine", "eight", "seven", "six", "five", "four", "three", "two", "one"))
x
x$cumfreq <- cumsum(x$frequency)
print(x)
require(data.table)
x <- data.table(frequency = c(10,9,8,7,6,5,4,3,2,1), names = c("ten", "nine", "eight", "seven", "six", "five", "four", "three", "two", "one"))
x$cumfreq <- x$frequency/cumsum(x$frequency)
print(x)
require(data.table)
x <- data.table(frequency = c(10,9,8,7,6,5,4,3,2,1), names = c("ten", "nine", "eight", "seven", "six", "five", "four", "three", "two", "one"))
x$cumfreq <- cumsum(x$frequency)/sum(x$frequency)
print(x)
require(data.table)
x <- data.table(frequency = c(10,9,8,7,6,5,4,3,2,1), names = c("ten", "nine", "eight", "seven", "six", "five", "four", "three", "two", "one"))
x$cumfreq <- cumsum(x$frequency)/sum(x$frequency)
print(x)
x <- subset(x, cumfreq <= .9)
print(x)
require(data.table)
x <- data.table(frequency = c(10,9,8,7,6,5,4,3,2,1), names = c("ten", "nine", "eight", "seven", "six", "five", "four", "three", "two", "one"))
top <- cuantile(x$frequency)
top <- quantile(x$frequency, probs = .9)
top
top <- quantile(x$frequency, probs = .1)
x <- subset(x, frequency>= top  )
x
require(data.table)
x <- data.table(frequency = c(10,9,8,7,6,5,4,3,2,1), names = c("ten", "nine", "eight", "seven", "six", "five", "four", "three", "two", "one"))
top <- quantile(x$frequency, probs = .1)
x <- subset(x, frequency> top  )
x
library(dplyr)
library(tidyr)
library(tidytext)
install.packages("tidytext")
library(dplyr)
library(tidyr)
library(tidytext)
library(textdata)
install.packages("textdata")
library(dplyr)
library(tidyr)
library(tidytext)
library(textdata)
nrc_joy <- get_sentiments("nrc") %>% filter(sentiment == "joy")
nrc_joy <- get_sentiments("nrc") %>% filter(sentiment == "joy")
sessionInfo()
sessionInfo()
library(dplyr)
library(tidyr)
library(tidytext)
library(textdata)
nrc_joy <- get_sentiments("nrc") %>% filter(sentiment == "joy")
sessionInfo()
w_start <- 1
T_ui <- c(1,2,3) #your sample
w_start <- 1
T_ui <- c(1,2,3) #your sample
w_i <- c(1,2,3)/10 #another sample
w_start <- 1
mu <- 1
T_ui <- c(1,2,3) #your sample
w_i <- c(1,2,3)/10 #another sample
?plnorm
ll <- function(lambda, eta, sigma_w, mu, w_start, w_i, N, N_u )
{
# fix the others params
w_start <- 1
mu <- 1
T_ui <- c(1,2,3) #your sample
w_i <- c(1,2,3)/10 #another sample
sigma_w <- 1
N <- 1
N_u <- 1
#return another funtion
function(lambda, eta)
{
F_star <- log( plnorm( q = w_star,
meanlog = mu, sdlog = sigma_w) )
ll.scalar <- N * lambda + N_u*log( F_star) - lambda * F_star * sum(T_ui) +
N_u* log(eta) + sum( log( dlnorm(x = w_i))) - N * log(eta + F_star)
return(ll.scalar)
}
}
ll <- function(lambda, eta, sigma_w, mu, w_start, w_i, N, N_u )
{
# fix the others params
w_start <- w_start
mu <- mu
T_ui <- T_ui #your sample
w_i <- w_i #another sample
sigma_w <- sigma_w
N <- N
N_u <- N_u
#return another funtion
function(lambda, eta)
{
F_star <- log( plnorm( q = w_star,
meanlog = mu, sdlog = sigma_w) )
ll.scalar <- N * lambda + N_u*log( F_star) - lambda * F_star * sum(T_ui) +
N_u* log(eta) + sum( log( dlnorm(x = w_i))) - N * log(eta + F_star)
return(ll.scalar)
}
}
# your values example
w_start <- 1
mu <- 1
T_ui <- c(1,2,3) #your sample
w_i <- c(1,2,3)/10 #another sample
sigma_w <- 1
N <- 1
N_u <- 1
# You build the function with the closure
myLL <- ll(lambda , eta, sigma_w , mu, w_start , w_i , N, N_u  )
result <- mle(myLL, start = list(lambda =0,  eta =0))
?nlm
result <- nlm(myLL, start = list(lambda =0,  eta =0))
result <- nlm(myLL, p = list(lambda =0,  eta =0))
result <- nlm(myLL, p = c(lambda =0,  eta =0))
ll <- function(lambda, eta, sigma_w, mu, w_start, w_i, N, N_u )
{
# fix the others params
w_start <- w_start
mu <- mu
T_ui <- T_ui #your sample
w_i <- w_i #another sample
sigma_w <- sigma_w
N <- N
N_u <- N_u
#return another funtion
function(lambda, eta)
{
F_star <- log( plnorm( q = w_star,
meanlog = mu, sdlog = sigma_w) )
ll.scalar <- N * lambda + N_u*log( F_star) - lambda * F_star * sum(T_ui) +
N_u* log(eta) + sum( log( dlnorm(x = w_i))) - N * log(eta + F_star)
return(ll.scalar)
}
}
# your values example
w_star <- 1
mu <- 1
T_ui <- c(1,2,3) #your sample
w_i <- c(1,2,3)/10 #another sample
sigma_w <- 1
N <- 1
N_u <- 1
# You build the function with the closure
myLL <- ll(lambda , eta, sigma_w , mu, w_start , w_i , N, N_u  )
# You build the function with the closure
myLL <- ll(lambda , eta, sigma_w , mu, w_star , w_i , N, N_u  )
result <- nlm(myLL, p = c(lambda =0,  eta =0))
ll <- function(lambda, eta, sigma_w, mu, w_start, w_i, N, N_u )
{
# fix the others params
w_start <- w_start
mu <- mu
T_ui <- T_ui #your sample
w_i <- w_i #another sample
sigma_w <- sigma_w
N <- N
N_u <- N_u
#return another funtion
function(lambda, eta)
{
F_star <- log( plnorm( q = w_star,
meanlog = mu, sdlog = sigma_w) )
ll.scalar <- N * lambda + N_u*log( F_star) - lambda * F_star * sum(T_ui) +
N_u* log(eta) + sum( log( dlnorm(x = w_i))) - N * log(eta + F_star)
return(ll.scalar)
}
}
# your values example
w_star <- 1
mu <- 1
T_ui <- c(1,2,3) #your sample
w_i <- c(1,2,3)/10 #another sample
sigma_w <- 1
N <- 1
N_u <- 1
# You build the function with the closure
myLL <- ll(lambda , eta, sigma_w , mu, w_star , w_i , N, N_u  )
myLL
result <- nlm(myLL, p = c(lambda =0,  eta =0))
class(myLL)
result <- nlm(f=myLL, p = c(lambda =0,  eta =0))
myLL
ll <- function(lambda, eta, sigma_w, mu, w_start, w_i, N, N_u )
{
# fix the others params
w_start <- w_start
mu <- mu
T_ui <- T_ui #your sample
w_i <- w_i #another sample
sigma_w <- sigma_w
N <- N
N_u <- N_u
#return another funtion
function(lambda, eta)
{
x <- lambda
F_star <- log( plnorm( q = w_star,
meanlog = mu, sdlog = sigma_w) )
ll.scalar <- N * lambda + N_u*log( F_star) - lambda * F_star * sum(T_ui) +
N_u* log(eta) + sum( log( dlnorm(x = w_i))) - N * log(eta + F_star)
return(ll.scalar)
}
}
# your values example
w_star <- 1
mu <- 1
T_ui <- c(1,2,3) #your sample
w_i <- c(1,2,3)/10 #another sample
sigma_w <- 1
N <- 1
N_u <- 1
# You build the function with the closure
myLL <- ll(lambda , eta, sigma_w , mu, w_star , w_i , N, N_u  )
ll <- function(lambda, eta, sigma_w, mu, w_start, w_i, N, N_u )
{
# fix the others params
w_start <- w_start
mu <- mu
T_ui <- T_ui #your sample
w_i <- w_i #another sample
sigma_w <- sigma_w
N <- N
N_u <- N_u
#return another funtion
function(lambda, eta)
{
F_star <- log( plnorm( q = w_star,
meanlog = mu, sdlog = sigma_w) )
ll.scalar <- N * lambda + N_u*log( F_star) - lambda * F_star * sum(T_ui) +
N_u* log(eta) + sum( log( dlnorm(x = w_i))) - N * log(eta + F_star)
return(ll.scalar)
}
}
# your values example
w_star <- 1
mu <- 1
T_ui <- c(1,2,3) #your sample
w_i <- c(1,2,3)/10 #another sample
sigma_w <- 1
N <- 1
N_u <- 1
# You build the function with the closure
myLL <- ll(lambda , eta, sigma_w , mu, w_star , w_i , N, N_u  )
result <- optim(fn=myLL, par= c(lambda =0,  eta =0))
result <- optim(fn=myLL, par= c(0,  0))
library(stats4)
?mle
result <- mle(myLL, start= c(0,  0))
result <- mle(myLL, start= list(lambda=0,  eta=0))
result <- mle(-myLL, start= list(lambda=0,  eta=0))
library(stats4)
ll <- function(lambda, eta, sigma_w, mu, w_start, w_i, N, N_u )
{
# fix the others params
w_start <- w_start
mu <- mu
T_ui <- T_ui #your sample
w_i <- w_i #another sample
sigma_w <- sigma_w
N <- N
N_u <- N_u
#return another funtion
function(lambda, eta)
{
F_star <- log( plnorm( q = w_star,
meanlog = mu, sdlog = sigma_w) )
ll.scalar <- N * lambda + N_u*log( F_star) - lambda * F_star * sum(T_ui) +
N_u* log(eta) + sum( log( dlnorm(x = w_i))) - N * log(eta + F_star)
return(-ll.scalar) # negative for use in stats4::mle
}
}
# your values example
w_star <- 1
mu <- 1
T_ui <- c(1,2,3) #your sample
w_i <- c(1,2,3)/10 #another sample
sigma_w <- 1
N <- 1
N_u <- 1
# You build the function with the closure
myLL <- ll(lambda , eta, sigma_w , mu, w_star , w_i , N, N_u  )
result <- mle(myLL, start= list(lambda=0,  eta=0))
require(data.table)
x <- data.table(frequency = c(10,9,8,7,6,5,4,3,2,1), names = c("ten", "nine", "eight", "seven", "six", "five", "four", "three", "two", "one"))
x$cumfreq <- cumsum(x$frequency)/sum(x$frequency)
print(x)
x <- subset(x, cumfreq <= .9)
print(x)
require(data.table)
x <- data.table(frequency = c(10,9,8,7,6,5,4,3,2,1), names = c("ten", "nine", "eight", "seven", "six", "five", "four", "three", "two", "one"))
x$cumfreq <- cumsum(x$frequency)/sum(x$frequency)
print(x)
x <- subset(x, cumfreq = .9)
print(x)
x$cumfreq # don't forget delete column for performance
require(data.table)
x <- data.table(frequency = c(10,9,8,7,6,5,4,3,2,1), names = c("ten", "nine", "eight", "seven", "six", "five", "four", "three", "two", "one"))
x$cumfreq <- cumsum(x$frequency)/sum(x$frequency)
print(x)
x <- subset(x, cumfreq = .9)
print(x)
require(data.table)
x <- data.table(frequency = c(10,9,8,7,6,5,4,3,2,1), names = c("ten", "nine", "eight", "seven", "six", "five", "four", "three", "two", "one"))
x$cumfreq <- cumsum(x$frequency)/sum(x$frequency)
print(x)
x <- subset(x, cumfreq < .9)
print(x)
x$cumfreq # don't forget delete column for performance
require(data.table)
x <- data.table(frequency = c(10,9,8,7,6,5,4,3,2,1), names = c("ten", "nine", "eight", "seven", "six", "five", "four", "three", "two", "one"))
x$cumfreq <- cumsum(x$frequency)/sum(x$frequency)
print(x)
x <- subset(x, cumfreq <= .9)
print(x)
setwd("~/Desktop/MonocicloMorado/Fou")
dir()
dir()
dir('RawData')
files <- dir('RawData')
r <- read.csv('2019-01.csv')
setwd("~/Desktop/MonocicloMorado/Fou")
setwd("~/Desktop/MonocicloMorado/Fou")
files <- dir('RawData')
r <- read.csv('/RawData/2019-01.csv')
r <- read.csv('RawData/2019-01.csv')
_r <- 2
setwd("~/Desktop/MonocicloMorado/Fou")
files <- dir('RawData')
r <- read.csv('RawData/2019-01.csv')
for (i in files[1:9])
{
path <- paste0('RawData/',i)
print(path)
r_ <- read.csv(path)
r <- rbind(r, r_)
}
View(r_)
remove(list=ls())
setwd("~/Desktop/MonocicloMorado/Fou")
files <- dir('RawData')
r <- read.csv('RawData/2019-01.csv')
for (i in files[2:9])
{
path <- paste0('RawData/',i)
print(path)
r_ <- read.csv(path)
r <- rbind(r, r_[, names(r)])
}
remove(list=ls())
setwd("~/Desktop/MonocicloMorado/Fou")
files <- dir('RawData')
r <- read.csv('RawData/2019-01.csv', stringsAsFactors = FALSE)
for (i in files[2:9])
{
path <- paste0('RawData/',i)
print(path)
r_ <- read.csv(path, stringsAsFactors = FALSE)
r <- rbind(r, r_[, names(r)])
}
########################### lectura
remove(list=ls())
setwd("~/Desktop/MonocicloMorado/Fou")
files <- dir('RawData')
r <- read.csv('RawData/2019-01.csv', stringsAsFactors = FALSE)
for (i in files[2:9])
{
path <- paste0('RawData/',i)
print(path)
r_ <- read.csv(path, stringsAsFactors = FALSE)
r <- rbind(r, r_[, names(r)])
}
################### creacion de subdataset
library(dplyr)
names(r)
r %>% select(Genero_Usuario, Edad_Usuario) %>% group_by(Genero_Usuario, Edad_Usuario)%>%
summarise(freq = n())
r %>% select(Genero_Usuario, Edad_Usuario) %>% group_by(Genero_Usuario, Edad_Usuario)%>%
summarise(freq = n()) -> x
View(x)
library(aws.s3)
my_Bucket <- get_bucket( 'arcadatathon' ,
key = 'AKIAUQ5DUJXOWW53FPI6',
secret = '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' )
class(my_Bucket)
library(aws.s3)
my_Bucket <- get_bucket( 'arcadatathon' ,
key = 'AKIAUQ5DUJXOWW53FPI6',
secret = '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' )
class(my_Bucket)
#Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAUQ5DUJXOWW53FPI6",
#          "AWS_SECRET_ACCESS_KEY" = "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")
#files <- get_bucket(my_Bucket, prefix="DATA_AC")
length(my_Bucket)
i <- my_Bucket[2]
View(i)
i$Contents$Key
get_object(url)
for (i in mmy_Bucket)
{
url <- paste0('s3://arcadatathon/',i$Contents$Key)
print(url)
get_object(url)
}
for (i in my_Bucket)
{
url <- paste0('s3://arcadatathon/',i$Contents$Key)
print(url)
get_object(url)
}
